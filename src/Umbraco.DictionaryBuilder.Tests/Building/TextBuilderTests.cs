using System;
using System.Text;
using Moq;
using NUnit.Framework;
using Umbraco.DictionaryBuilder.Building;
using Umbraco.DictionaryBuilder.Configuration;
using Umbraco.DictionaryBuilder.Models;

namespace Umbraco.DictionaryBuilder.Tests.Building
{
    [TestFixture]
    public class TextBuilderTests
    {
        [Test]
        public void GenerateTestModel()
        {
            // Arrange
            Mock<IDictionaryBuilderConfiguration>config = new Mock<IDictionaryBuilderConfiguration>();
            config.SetupGet(x => x.DictionaryNamespace).Returns("Umbraco.Web");
            config.SetupGet(x => x.DictionaryItemsPartialClassName).Returns("Dictionaries");
            
            StringBuilder sb = new StringBuilder();
            
            CodeBuilder subject = new CodeBuilder(config.Object, sb);

            // Act
            subject.Generate(TestModel);

            // Assert
            string result = sb.ToString();
            Assert.That(result, Is.EqualTo(TestGenerated));
        }

        [Test]
        public void GenerateTestValueModel()
        {
            // Arrange
            Mock<IDictionaryBuilderConfiguration>config = new Mock<IDictionaryBuilderConfiguration>();
            config.SetupGet(x => x.DictionaryNamespace).Returns("Umbraco.Web");
            config.SetupGet(x => x.DictionaryItemsPartialClassName).Returns("DictionaryItems");
            
            CodeBuilder subject = new CodeBuilder(config.Object);

            // Act
            subject.Generate(TestValueModel);

            // Assert
            string result = subject.ToString();
            Assert.That(result, Is.EqualTo(TestValueGenerated));
        }

        [Test]
        public void GenerateTestValueChildModel()
        {
            // Arrange
            Mock<IDictionaryBuilderConfiguration>config = new Mock<IDictionaryBuilderConfiguration>();
            config.SetupGet(x => x.DictionaryNamespace).Returns("Umbraco.Web");
            config.SetupGet(x => x.DictionaryItemsPartialClassName).Returns("Dic");
            
            StringBuilder sb = new StringBuilder();
            
            CodeBuilder subject = new CodeBuilder(config.Object, sb);

            // Act
            subject.Generate(TestValueChildModel);

            // Assert
            string result = sb.ToString();
            Assert.That(result, Is.EqualTo(TestValueChildGenerated));
        }
        
        private static readonly DictionaryModel TestModel = new DictionaryModelWrapper(Guid.NewGuid(), "Test");
        private static readonly DictionaryModel TestValueModel = new DictionaryModelWrapper(Guid.NewGuid(), "Test.Value", TestModel);
        private static readonly DictionaryModel TestValueChildModel = new DictionaryModelWrapper(Guid.NewGuid(), "Test.Value.Child", TestValueModel);

        private static string TestGenerated = @"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.DictionaryBuilder v1.0.5
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Umbraco.DictionaryBuilder.Models;

namespace Umbraco.Web
{
    public partial class Dictionaries
    {
        #region Test
        [System.CodeDom.Compiler.GeneratedCodeAttribute(""Umbraco.DictionaryBuilder"", ""1.0.5"")]
        private static _Test _test = new _Test();

        /// <summary>
        /// The dictionary item: [Test]
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute(""Umbraco.DictionaryBuilder"", ""1.0.5"")]
        public static _Test Test => _test;

        public partial class _Test : DictionaryModel
        {
            public _Test() : base(""Test"") {}
        }
        #endregion
    }
}
";

        private static string TestValueGenerated = @"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.DictionaryBuilder v1.0.5
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Umbraco.DictionaryBuilder.Models;

namespace Umbraco.Web
{
    public partial class DictionaryItems
    {
        #region Test.Value
        public partial class _Test
        {
            [System.CodeDom.Compiler.GeneratedCodeAttribute(""Umbraco.DictionaryBuilder"", ""1.0.5"")]
            private static _TestValue _testValue = new _TestValue();

            /// <summary>
            /// The dictionary item: [Test.Value]
            /// </summary>
            [System.CodeDom.Compiler.GeneratedCodeAttribute(""Umbraco.DictionaryBuilder"", ""1.0.5"")]
            public _TestValue TestValue => _testValue;

            public partial class _TestValue : DictionaryModel
            {
                public _TestValue() : base(""Test.Value"") {}
            }
        }
        #endregion
    }
}
";

        private static string TestValueChildGenerated = @"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.DictionaryBuilder v1.0.5
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Umbraco.DictionaryBuilder.Models;

namespace Umbraco.Web
{
    public partial class Dic
    {
        #region Test.Value.Child
        public partial class _Test
        {
            public partial class _TestValue
            {
                [System.CodeDom.Compiler.GeneratedCodeAttribute(""Umbraco.DictionaryBuilder"", ""1.0.5"")]
                private static _TestValueChild _testValueChild = new _TestValueChild();

                /// <summary>
                /// The dictionary item: [Test.Value.Child]
                /// </summary>
                [System.CodeDom.Compiler.GeneratedCodeAttribute(""Umbraco.DictionaryBuilder"", ""1.0.5"")]
                public _TestValueChild TestValueChild => _testValueChild;

                public partial class _TestValueChild : DictionaryModel
                {
                    public _TestValueChild() : base(""Test.Value.Child"") {}
                }
            }
        }
        #endregion
    }
}
";
    }
}